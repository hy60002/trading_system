import { EventEmitter } from 'events';
import { MCPServerParams } from '../core/types/index.js';
/**
 * Configuration change event types
 */
export declare enum ConfigChangeEvent {
    TRANSPORT_CONFIG_CHANGED = "transportConfigChanged"
}
/**
 * MCP configuration manager that handles loading, watching, and reloading MCP server configurations
 */
export declare class McpConfigManager extends EventEmitter {
    private static instance;
    private configWatcher;
    private transportConfig;
    private configFilePath;
    private debounceTimer;
    private readonly debounceDelayMs;
    /**
     * Private constructor to enforce singleton pattern
     * @param configFilePath - Optional path to the config file. If not provided, uses global config path
     */
    private constructor();
    /**
     * Get the singleton instance of McpConfigManager
     * @param configFilePath - Optional path to the config file
     */
    static getInstance(configFilePath?: string): McpConfigManager;
    /**
     * Ensure the config directory and file exist
     */
    private ensureConfigExists;
    /**
     * Load the configuration from the config file
     */
    private loadConfig;
    /**
     * Start watching the configuration file for changes
     */
    startWatching(): void;
    /**
     * Stop watching the configuration file
     */
    stopWatching(): void;
    /**
     * Debounced configuration reload to prevent excessive reloading
     */
    private debouncedReloadConfig;
    /**
     * Reload the configuration from the config file
     */
    reloadConfig(): void;
    /**
     * Get the current transport configuration
     * @returns The current transport configuration
     */
    getTransportConfig(): Record<string, MCPServerParams>;
    /**
     * Get all available tags from the configured servers
     * @returns Array of unique tags from all servers
     */
    getAvailableTags(): string[];
}
export default McpConfigManager;
//# sourceMappingURL=mcpConfigManager.d.ts.map