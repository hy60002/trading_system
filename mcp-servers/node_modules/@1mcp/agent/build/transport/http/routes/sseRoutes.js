import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';
import { ErrorCode } from '@modelcontextprotocol/sdk/types.js';
import logger from '../../../logger/logger.js';
import { SSE_ENDPOINT, MESSAGES_ENDPOINT } from '../../../constants.js';
import { ServerStatus } from '../../../core/types/index.js';
import tagsExtractor from '../middlewares/tagsExtractor.js';
import { getValidatedTags } from '../middlewares/scopeAuthMiddleware.js';
export function setupSseRoutes(router, serverManager, authMiddleware) {
    const middlewares = [tagsExtractor, authMiddleware];
    router.get(SSE_ENDPOINT, ...middlewares, async (req, res) => {
        try {
            const transport = new SSEServerTransport(MESSAGES_ENDPOINT, res);
            // Use validated tags from scope auth middleware
            const tags = getValidatedTags(res);
            // Connect the transport using the server manager
            await serverManager.connectTransport(transport, transport.sessionId, {
                tags,
                enablePagination: req.query.pagination === 'true',
            });
            transport.onclose = () => {
                serverManager.disconnectTransport(transport.sessionId);
                // Note: ServerManager already logs the disconnection
            };
            transport.onerror = (error) => {
                logger.error(`SSE transport error for session ${transport.sessionId}:`, error);
                const server = serverManager.getServer(transport.sessionId);
                if (server) {
                    server.status = ServerStatus.Error;
                    server.lastError = error instanceof Error ? error : new Error(String(error));
                }
            };
        }
        catch (error) {
            logger.error('SSE connection error:', error);
            res.status(500).end();
        }
    });
    router.post(MESSAGES_ENDPOINT, ...middlewares, async (req, res) => {
        try {
            const sessionId = req.query.sessionId;
            if (!sessionId) {
                res.status(400).json({
                    error: {
                        code: ErrorCode.InvalidParams,
                        message: 'Invalid params: sessionId is required',
                    },
                });
                return;
            }
            const transport = serverManager.getTransport(sessionId);
            if (transport instanceof SSEServerTransport) {
                await transport.handlePostMessage(req, res, req.body);
                return;
            }
            res.status(404).json({
                error: {
                    code: ErrorCode.InvalidParams,
                    message: 'Transport not found',
                },
            });
        }
        catch (error) {
            logger.error('Message handling error:', error);
            res.status(500).json({
                error: {
                    code: ErrorCode.InternalError,
                    message: 'Internal server error',
                },
            });
        }
    });
}
//# sourceMappingURL=sseRoutes.js.map