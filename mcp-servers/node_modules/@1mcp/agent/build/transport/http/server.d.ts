import { ServerManager } from '../../core/server/serverManager.js';
/**
 * ExpressServer orchestrates the HTTP/SSE transport layer for the MCP server.
 *
 * This class manages the Express application, authentication, and route setup.
 * It provides both HTTP and SSE transport options with optional OAuth 2.1 authentication.
 *
 * @example
 * ```typescript
 * const serverManager = await setupServer();
 * const expressServer = new ExpressServer(serverManager);
 * expressServer.start(3050, 'localhost');
 * ```
 */
export declare class ExpressServer {
    private app;
    private serverManager;
    private oauthProvider;
    private configManager;
    /**
     * Creates a new ExpressServer instance.
     *
     * Initializes the Express application, sets up middleware, authentication,
     * and configures all routes for MCP transport and OAuth endpoints.
     *
     * @param serverManager - The server manager instance for handling MCP operations
     */
    constructor(serverManager: ServerManager);
    /**
     * Sets up Express middleware including CORS, body parsing, and error handling.
     *
     * Configures the basic middleware stack required for the MCP server:
     * - Enhanced security middleware (conditional based on feature flag)
     * - HTTP request logging for all requests
     * - CORS for cross-origin requests
     * - JSON body parsing
     * - Global error handling
     */
    private setupMiddleware;
    /**
     * Sets up all application routes including OAuth and MCP transport endpoints.
     *
     * Configures the following route groups:
     * - OAuth 2.1 endpoints (always available, auth can be disabled)
     * - Streamable HTTP transport routes with authentication middleware
     * - SSE transport routes with authentication middleware
     *
     * Logs the authentication status for debugging purposes.
     */
    private setupRoutes;
    /**
     * Starts the Express server on the specified port and host.
     *
     * Binds the Express application to the network interface and logs
     * the server status including authentication configuration.
     *
     * @param port - The port number to listen on
     * @param host - The host address to bind to
     */
    start(): void;
    /**
     * Performs graceful shutdown of the Express server.
     *
     * Cleans up resources including:
     * - Authentication manager shutdown
     * - Session cleanup
     * - Timer cleanup
     */
    shutdown(): void;
}
//# sourceMappingURL=server.d.ts.map