import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import { mcpAuthRouter } from '@modelcontextprotocol/sdk/server/auth/router.js';
import logger from '../../logger/logger.js';
import errorHandler from './middlewares/errorHandler.js';
import { setupSecurityMiddleware } from './middlewares/securityMiddleware.js';
import { httpRequestLogger } from './middlewares/httpRequestLogger.js';
import { SDKOAuthServerProvider } from '../../auth/sdkOAuthServerProvider.js';
import { setupStreamableHttpRoutes } from './routes/streamableHttpRoutes.js';
import { setupSseRoutes } from './routes/sseRoutes.js';
import createOAuthRoutes from './routes/oauthRoutes.js';
import createHealthRoutes from './routes/healthRoutes.js';
import { AgentConfigManager } from '../../core/server/agentConfig.js';
import { RATE_LIMIT_CONFIG } from '../../constants.js';
import { createScopeAuthMiddleware } from './middlewares/scopeAuthMiddleware.js';
import { McpConfigManager } from '../../config/mcpConfigManager.js';
/**
 * ExpressServer orchestrates the HTTP/SSE transport layer for the MCP server.
 *
 * This class manages the Express application, authentication, and route setup.
 * It provides both HTTP and SSE transport options with optional OAuth 2.1 authentication.
 *
 * @example
 * ```typescript
 * const serverManager = await setupServer();
 * const expressServer = new ExpressServer(serverManager);
 * expressServer.start(3050, 'localhost');
 * ```
 */
export class ExpressServer {
    app;
    serverManager;
    oauthProvider;
    configManager;
    /**
     * Creates a new ExpressServer instance.
     *
     * Initializes the Express application, sets up middleware, authentication,
     * and configures all routes for MCP transport and OAuth endpoints.
     *
     * @param serverManager - The server manager instance for handling MCP operations
     */
    constructor(serverManager) {
        this.app = express();
        this.serverManager = serverManager;
        this.configManager = AgentConfigManager.getInstance();
        // Configure trust proxy setting before any middleware
        this.app.set('trust proxy', this.configManager.getTrustProxy());
        // Initialize OAuth provider with custom session storage path if configured
        const sessionStoragePath = this.configManager.getSessionStoragePath();
        this.oauthProvider = new SDKOAuthServerProvider(sessionStoragePath);
        this.setupMiddleware();
        this.setupRoutes();
    }
    /**
     * Sets up Express middleware including CORS, body parsing, and error handling.
     *
     * Configures the basic middleware stack required for the MCP server:
     * - Enhanced security middleware (conditional based on feature flag)
     * - HTTP request logging for all requests
     * - CORS for cross-origin requests
     * - JSON body parsing
     * - Global error handling
     */
    setupMiddleware() {
        // Conditionally apply enhanced security middleware (must be first if enabled)
        if (this.configManager.isEnhancedSecurityEnabled()) {
            this.app.use(...setupSecurityMiddleware());
        }
        // Add HTTP request logging middleware (early in the stack for complete coverage)
        this.app.use(httpRequestLogger);
        this.app.use(cors()); // Allow all origins for local dev
        this.app.use(bodyParser.json());
        this.app.use(bodyParser.urlencoded({ extended: true }));
        // Add error handling middleware
        this.app.use(errorHandler);
    }
    /**
     * Sets up all application routes including OAuth and MCP transport endpoints.
     *
     * Configures the following route groups:
     * - OAuth 2.1 endpoints (always available, auth can be disabled)
     * - Streamable HTTP transport routes with authentication middleware
     * - SSE transport routes with authentication middleware
     *
     * Logs the authentication status for debugging purposes.
     */
    setupRoutes() {
        // Setup OAuth routes using SDK's mcpAuthRouter
        const issuerUrl = new URL(this.configManager.getUrl());
        const rateLimitConfig = {
            windowMs: this.configManager.getRateLimitWindowMs(),
            max: this.configManager.getRateLimitMax(),
            message: RATE_LIMIT_CONFIG.OAUTH.MESSAGE,
            standardHeaders: true,
            legacyHeaders: false,
        };
        // Get available scopes from MCP config
        const mcpConfigManager = McpConfigManager.getInstance();
        const availableTags = mcpConfigManager.getAvailableTags();
        // Convert tags to supported scopes
        const scopesSupported = availableTags.map((tag) => `tag:${tag}`);
        const authRouter = mcpAuthRouter({
            provider: this.oauthProvider,
            issuerUrl,
            baseUrl: issuerUrl,
            scopesSupported,
            resourceName: '1MCP Agent - Universal MCP Server Proxy',
            authorizationOptions: {
                rateLimit: rateLimitConfig,
            },
            tokenOptions: {
                rateLimit: rateLimitConfig,
            },
            revocationOptions: {
                rateLimit: rateLimitConfig,
            },
            clientRegistrationOptions: {
                rateLimit: rateLimitConfig,
            },
        });
        this.app.use(authRouter);
        // Setup OAuth management routes (no auth required)
        this.app.use('/oauth', createOAuthRoutes(this.oauthProvider));
        // Setup health check routes (no auth required for monitoring)
        this.app.use('/health', createHealthRoutes());
        // Setup MCP transport routes (auth is handled per-route via scopeAuthMiddleware)
        const router = express.Router();
        const scopeAuthMiddleware = createScopeAuthMiddleware(this.oauthProvider);
        setupStreamableHttpRoutes(router, this.serverManager, scopeAuthMiddleware);
        setupSseRoutes(router, this.serverManager, scopeAuthMiddleware);
        this.app.use(router);
        // Log authentication status
        if (this.configManager.isAuthEnabled()) {
            logger.info('Authentication enabled - OAuth 2.1 endpoints available via SDK');
        }
        else {
            logger.info('Authentication disabled - all endpoints accessible without auth');
        }
    }
    /**
     * Starts the Express server on the specified port and host.
     *
     * Binds the Express application to the network interface and logs
     * the server status including authentication configuration.
     *
     * @param port - The port number to listen on
     * @param host - The host address to bind to
     */
    start() {
        const { port, host } = this.configManager.getConfig();
        this.app.listen(port, host, () => {
            const authStatus = this.configManager.isAuthEnabled() ? 'with authentication' : 'without authentication';
            logger.info(`Server is running on port ${port} with HTTP/SSE and Streamable HTTP transport ${authStatus}`);
            logger.info(`ðŸ“‹ OAuth Management Dashboard: ${this.configManager.getUrl()}/oauth`);
        });
    }
    /**
     * Performs graceful shutdown of the Express server.
     *
     * Cleans up resources including:
     * - Authentication manager shutdown
     * - Session cleanup
     * - Timer cleanup
     */
    shutdown() {
        this.oauthProvider.shutdown();
    }
}
//# sourceMappingURL=server.js.map