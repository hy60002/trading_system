import { Request, Response, NextFunction } from 'express';
import { SDKOAuthServerProvider } from '../../../auth/sdkOAuthServerProvider.js';
/**
 * Authentication information structure
 */
export interface AuthInfo {
    token: string;
    clientId: string;
    grantedScopes: string[];
    grantedTags: string[];
}
/**
 * Creates a scope validation middleware that uses the SDK's bearer auth middleware
 *
 * This middleware:
 * 1. Uses SDK's requireBearerAuth to verify tokens (when auth enabled)
 * 2. Validates that requested tags are covered by granted scopes
 * 3. Provides authentication context to downstream handlers
 *
 * When scope validation is disabled, all tags are allowed.
 * When scope validation is enabled:
 * - If auth is also enabled, validates tokens and scopes
 * - If auth is disabled, allows all tags (useful for development/testing)
 */
export declare function createScopeAuthMiddleware(oauthProvider?: SDKOAuthServerProvider): (_req: Request, res: Response, next: NextFunction) => void;
/**
 * Utility function to get validated tags from response locals
 *
 * This should be used by downstream handlers instead of directly accessing res.locals.tags
 * to ensure they get scope-validated tags.
 */
export declare function getValidatedTags(res: Response): string[];
/**
 * Utility function to get authentication information from response locals
 */
export declare function getAuthInfo(res: Response): AuthInfo | undefined;
declare const _default: (_req: Request, res: Response, next: NextFunction) => void;
export default _default;
//# sourceMappingURL=scopeAuthMiddleware.d.ts.map