/**
 * Security constants for scope validation
 */
export declare const SCOPE_VALIDATION_CONFIG: {
    /** Maximum allowed length for a single scope */
    readonly MAX_SCOPE_LENGTH: 100;
    /** Maximum number of scopes per request */
    readonly MAX_SCOPES_COUNT: 50;
    /** Valid tag name pattern: alphanumeric, underscore, hyphen only */
    readonly TAG_NAME_PATTERN: RegExp;
    /** Valid tag scope pattern: tag: prefix followed by valid tag name */
    readonly TAG_SCOPE_PATTERN: RegExp;
    /** Minimum tag name length */
    readonly MIN_TAG_LENGTH: 1;
    /** Maximum tag name length */
    readonly MAX_TAG_LENGTH: 50;
};
/**
 * Parsed scope structure
 */
export interface ParsedScope {
    type: 'tag';
    value: string;
}
/**
 * Scope validation result
 */
export interface ScopeValidationResult {
    isValid: boolean;
    errors: string[];
    validScopes: string[];
    invalidScopes: string[];
}
/**
 * Validates if a string is a valid tag name
 * @param tagName - The tag name to validate
 * @returns True if valid, false otherwise
 */
export declare function isValidTagName(tagName: string): boolean;
/**
 * Validates if a string is a valid tag scope
 * @param scope - The scope to validate
 * @returns True if valid, false otherwise
 */
export declare function isValidTagScope(scope: string): boolean;
/**
 * Safely extracts tag name from a tag scope
 * @param scope - The scope string (e.g., "tag:web")
 * @returns The tag name if valid, null otherwise
 */
export declare function extractTagFromScope(scope: string): string | null;
/**
 * Parses a scope string into its components
 * @param scope - The scope string to parse
 * @returns Parsed scope object or null if invalid
 */
export declare function parseScope(scope: string): ParsedScope | null;
/**
 * Validates an array of scopes for format and security
 * @param scopes - Array of scope strings to validate
 * @returns Validation result with details
 */
export declare function validateScopes(scopes: string[]): ScopeValidationResult;
/**
 * Validates that requested scopes are available (allowlist approach)
 * @param requestedScopes - Scopes requested by client
 * @param availableTags - Tags available on the server
 * @returns Validation result
 */
export declare function validateScopesAgainstAvailableTags(requestedScopes: string[], availableTags: string[]): ScopeValidationResult;
/**
 * Checks if granted scopes satisfy the requirements for requested tags
 * @param grantedScopes - Scopes granted during OAuth flow
 * @param requestedTags - Tags requested for current operation
 * @returns True if all requested tags are covered by granted scopes
 */
export declare function hasRequiredScopes(grantedScopes: string[], requestedTags: string[]): boolean;
/**
 * Converts tags to their corresponding scopes
 * @param tags - Array of tag names
 * @returns Array of tag scopes
 */
export declare function tagsToScopes(tags: string[]): string[];
/**
 * Converts scopes to their corresponding tags
 * @param scopes - Array of scope strings
 * @returns Array of tag names
 */
export declare function scopesToTags(scopes: string[]): string[];
/**
 * Security utility to audit scope operations
 * @param operation - The operation being performed
 * @param context - Additional context for logging
 */
export declare function auditScopeOperation(operation: string, context: {
    clientId?: string;
    requestedScopes?: string[];
    grantedScopes?: string[];
    success?: boolean;
    error?: string;
}): void;
//# sourceMappingURL=scopeValidation.d.ts.map