export declare class MCPError extends Error {
    code: number;
    data?: any;
    constructor(message: string, code: number, data?: any);
}
export declare class ClientConnectionError extends MCPError {
    constructor(clientName: string, cause: Error);
}
export declare class ClientNotFoundError extends MCPError {
    constructor(clientName: string);
}
export declare class ClientOperationError extends MCPError {
    constructor(clientName: string, operation: string, cause: Error, context?: Record<string, unknown>);
}
export declare class ValidationError extends MCPError {
    constructor(message: string, validationErrors: any);
}
export declare class TransportError extends MCPError {
    constructor(transportName: string, cause: Error);
}
export declare class InvalidRequestError extends MCPError {
    constructor(message: string, data?: any);
}
export declare class CapabilityError extends MCPError {
    constructor(clientName: string, capability: string);
}
export type MCPErrorType = ClientConnectionError | ClientNotFoundError | ClientOperationError | ValidationError | TransportError | InvalidRequestError | CapabilityError;
//# sourceMappingURL=errorTypes.d.ts.map