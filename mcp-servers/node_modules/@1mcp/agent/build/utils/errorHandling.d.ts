import { MCPError, MCPErrorType } from './errorTypes.js';
/**
 * Wraps a function with error handling
 * @param fn The function to wrap
 * @param errorMessage The error message to use if the function fails
 * @returns The wrapped function
 */
export declare function withErrorHandling<T, Args extends any[]>(fn: (...args: Args) => Promise<T>, errorMessage: string): (...args: Args) => Promise<T>;
/**
 * Normalizes an error to an MCPError type
 * @param error The error to normalize
 * @param errorMessage The error message to use if the error is not an MCPError
 * @returns The normalized error
 */
export declare function normalizeError(error: unknown, errorMessage: string): MCPErrorType;
/**
 * Checks if an error is a specific MCPError type
 * @param error The error to check
 * @param errorType The error type to check against
 * @returns True if the error is of the specified type
 */
export declare function isMCPError<T extends MCPError>(error: unknown, errorType: new (...args: any[]) => T): error is T;
/**
 * Gets the error code from an error
 * @param error The error to get the code from
 * @returns The error code
 */
export declare function getErrorCode(error: unknown): number;
/**
 * Gets the error message from an error
 * @param error The error to get the message from
 * @returns The error message
 */
export declare function getErrorMessage(error: unknown): string;
/**
 * Gets the error cause from an error
 * @param error The error to get the cause from
 * @returns The error cause
 */
export declare function getErrorCause(error: unknown): Error | undefined;
/**
 * Formats an error for JSON-RPC response
 * @param error The error to format
 * @returns A formatted error object
 */
export declare function formatErrorResponse(error: any): {
    code: number;
    message: string;
    data?: any;
};
//# sourceMappingURL=errorHandling.d.ts.map