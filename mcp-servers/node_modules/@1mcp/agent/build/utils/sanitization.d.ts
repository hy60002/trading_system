/**
 * Sanitization utilities for various use cases
 */
/**
 * HTML escape function to prevent XSS attacks
 * Escapes HTML entities in user-provided strings
 *
 * @param unsafe - The string to escape
 * @returns HTML-escaped string safe for display
 */
export declare function escapeHtml(unsafe: string): string;
/**
 * Sanitizes server name for use as filename by replacing special characters.
 * Based on the existing implementation in clientSessionManager.ts
 *
 * @param serverName - The server name to sanitize
 * @returns Sanitized server name safe for use as filename
 */
export declare function sanitizeServerName(serverName: string): string;
/**
 * Sanitizes server name for display purposes
 * Similar to filename sanitization but preserves more characters for readability
 *
 * @param serverName - The server name to sanitize
 * @returns Sanitized server name safe for display
 */
export declare function sanitizeServerNameForDisplay(serverName: string): string;
/**
 * Sanitizes URL parameter values to prevent injection attacks
 *
 * @param param - The parameter value to sanitize
 * @returns URL-safe parameter value
 */
export declare function sanitizeUrlParam(param: string): string;
/**
 * Sanitizes error messages for safe display
 * Removes potentially sensitive information and escapes HTML
 *
 * @param error - The error message to sanitize
 * @returns Sanitized error message safe for display
 */
export declare function sanitizeErrorMessage(error: string): string;
/**
 * Sanitizes HTTP headers for safe logging
 * Redacts sensitive authentication and authorization headers
 *
 * @param headers - The headers object to sanitize
 * @returns Sanitized headers object safe for logging
 */
export declare function sanitizeHeaders(headers: Record<string, any>): Record<string, any>;
/**
 * Comprehensive sanitization for server configuration data
 * Applies appropriate sanitization based on the context
 *
 * @param serverName - The server name to sanitize
 * @param context - The context where this will be used ('filename' | 'display' | 'url' | 'html')
 * @returns Sanitized server name appropriate for the context
 */
export declare function sanitizeServerNameForContext(serverName: string, context: 'filename' | 'display' | 'url' | 'html'): string;
//# sourceMappingURL=sanitization.d.ts.map