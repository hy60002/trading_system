import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { RequestOptions } from '@modelcontextprotocol/sdk/shared/protocol.js';
import { Resource, ResourceTemplate, Tool, Prompt } from '@modelcontextprotocol/sdk/types.js';
import { OutboundConnection, OutboundConnections } from '../core/types/index.js';
interface PaginationParams {
    [x: string]: unknown;
    _meta?: {
        [x: string]: unknown;
        progressToken?: string | number | undefined;
    } | undefined;
    cursor?: string | undefined;
}
interface PaginationResult<T> {
    items: T[];
    nextCursor?: string;
}
interface PaginationResponse {
    resources?: Resource[];
    resourceTemplates?: ResourceTemplate[];
    tools?: Tool[];
    prompts?: Prompt[];
    nextCursor?: string;
}
export declare function parseCursor(cursor?: string): {
    clientName: string;
    actualCursor?: string;
};
export declare function encodeCursor(clientName: string, nextCursor?: string): string | undefined;
export declare function handlePagination<T>(clients: OutboundConnections, params: PaginationParams, callClientMethod: (client: Client, params: unknown, opts: RequestOptions) => Promise<PaginationResponse>, transformResult: (client: OutboundConnection, result: PaginationResponse) => T[], enablePagination: boolean): Promise<PaginationResult<T>>;
export {};
//# sourceMappingURL=pagination.d.ts.map