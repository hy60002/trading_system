import { InboundConnection, EnhancedTransport } from '../core/types/index.js';
/**
 * Service to handle dynamic configuration reloading
 */
export declare class ConfigReloadService {
    private static instance;
    private serverInstances;
    private currentTransports;
    private isReloading;
    /**
     * Private constructor to enforce singleton pattern
     */
    private constructor();
    /**
     * Get the singleton instance of the ConfigReloadService
     * @returns The ConfigReloadService instance
     */
    static getInstance(): ConfigReloadService;
    /**
     * Initialize the service with initial transports
     * @param initialTransports The initial transports
     */
    initialize(initialTransports: Record<string, EnhancedTransport>): void;
    /**
     * Handle configuration changes
     * @param newConfig The new transport configuration
     */
    private handleConfigChange;
    /**
     * Update the server info when a client connects
     * @param sessionId The session ID for this server instance
     * @param serverInfo The MCP server instance
     */
    updateServerInfo(sessionId: string, serverInfo: InboundConnection): void;
    /**
     * Remove server info when a client disconnects
     * @param sessionId The session ID to remove
     */
    removeServerInfo(sessionId: string): void;
    /**
     * Stop the service and clean up resources
     */
    stop(): void;
}
declare const _default: ConfigReloadService;
export default _default;
//# sourceMappingURL=configReloadService.d.ts.map