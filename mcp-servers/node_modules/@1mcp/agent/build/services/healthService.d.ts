import { ClientStatus } from '../core/types/index.js';
/**
 * Health status levels
 */
export declare enum HealthStatus {
    HEALTHY = "healthy",
    DEGRADED = "degraded",
    UNHEALTHY = "unhealthy"
}
/**
 * MCP server health information
 */
export interface McpServerHealth {
    name: string;
    status: ClientStatus;
    healthy: boolean;
    lastConnected?: Date;
    lastError?: string;
    tags?: string[];
}
/**
 * System health metrics
 */
export interface SystemHealth {
    uptime: number;
    memory: {
        used: number;
        total: number;
        percentage: number;
    };
    process: {
        pid: number;
        nodeVersion: string;
        platform: string;
        arch: string;
    };
}
/**
 * Complete health check response
 */
export interface HealthCheckResponse {
    status: HealthStatus;
    timestamp: string;
    version: string;
    system: SystemHealth;
    servers: {
        total: number;
        healthy: number;
        unhealthy: number;
        details: McpServerHealth[];
    };
    configuration: {
        loaded: boolean;
        serverCount: number;
        enabledCount: number;
        disabledCount: number;
        authEnabled: boolean;
        transport: string;
    };
}
/**
 * Health service for monitoring system and MCP server status
 */
export declare class HealthService {
    private static instance;
    private startTime;
    private agentConfig;
    private constructor();
    /**
     * Get singleton instance
     */
    static getInstance(): HealthService;
    /**
     * Perform complete health check
     */
    performHealthCheck(): Promise<HealthCheckResponse>;
    /**
     * Sanitize health response based on security configuration
     */
    private sanitizeHealthResponse;
    /**
     * Sanitize error messages to prevent information leakage
     */
    private sanitizeErrorMessage;
    /**
     * Get system health metrics
     */
    private getSystemHealth;
    /**
     * Get MCP server health status
     */
    private getServerHealth;
    /**
     * Get configuration health status
     */
    private getConfigurationHealth;
    /**
     * Determine overall health status based on component status
     */
    private determineOverallHealth;
    /**
     * Get HTTP status code based on health status
     */
    getHttpStatusCode(healthStatus: HealthStatus): number;
}
export default HealthService;
//# sourceMappingURL=healthService.d.ts.map