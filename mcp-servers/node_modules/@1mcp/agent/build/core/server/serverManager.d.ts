import { Transport } from '@modelcontextprotocol/sdk/shared/transport.js';
import { OutboundConnections, InboundConnection, InboundConnectionConfig, OperationOptions } from '../types/index.js';
import type { OutboundConnection } from '../types/client.js';
export declare class ServerManager {
    private static instance;
    private inboundConns;
    private serverConfig;
    private serverCapabilities;
    private outboundConns;
    private transports;
    private connectionSemaphore;
    private disconnectingIds;
    private constructor();
    static getOrCreateInstance(config: {
        name: string;
        version: string;
    }, capabilities: {
        capabilities: Record<string, unknown>;
    }, outboundConns: OutboundConnections, transports: Record<string, Transport>): ServerManager;
    static get current(): ServerManager;
    static resetInstance(): void;
    connectTransport(transport: Transport, sessionId: string, opts: InboundConnectionConfig): Promise<void>;
    private performConnection;
    private doConnect;
    disconnectTransport(sessionId: string, forceClose?: boolean): void;
    getTransport(sessionId: string): Transport | undefined;
    getTransports(): Map<string, Transport>;
    getClientTransports(): Record<string, Transport>;
    getClients(): OutboundConnections;
    /**
     * Safely get a client by name. Returns undefined if not found or not an own property.
     * Encapsulates access to prevent prototype pollution and accidental key collisions.
     */
    getClient(serverName: string): OutboundConnection | undefined;
    getActiveTransportsCount(): number;
    getServer(sessionId: string): InboundConnection | undefined;
    updateClientsAndTransports(newClients: OutboundConnections, newTransports: Record<string, Transport>): void;
    /**
     * Executes a server operation with error handling and retry logic
     * @param inboundConn The inbound connection to execute the operation on
     * @param operation The operation to execute
     * @param options Operation options including timeout and retry settings
     */
    executeServerOperation<T>(inboundConn: InboundConnection, operation: (inboundConn: InboundConnection) => Promise<T>, options?: OperationOptions): Promise<T>;
}
//# sourceMappingURL=serverManager.d.ts.map