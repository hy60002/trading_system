/**
 * Configuration interface for agent-specific settings.
 *
 * Defines the structure for authentication and session management configuration
 * that can be customized via CLI arguments or environment variables.
 */
export interface AgentConfig {
    host: string;
    port: number;
    externalUrl?: string;
    trustProxy: string | boolean;
    auth: {
        enabled: boolean;
        sessionTtlMinutes: number;
        sessionStoragePath?: string;
        oauthCodeTtlMs: number;
        oauthTokenTtlMs: number;
    };
    rateLimit: {
        windowMs: number;
        max: number;
    };
    features: {
        auth: boolean;
        scopeValidation: boolean;
        enhancedSecurity: boolean;
    };
    health: {
        detailLevel: 'full' | 'basic' | 'minimal';
    };
}
/**
 * AgentConfigManager manages agent-specific configuration settings.
 *
 * This singleton class handles authentication and session configuration
 * that differs from the main MCP server configuration. It provides
 * centralized access to agent settings with default values and
 * runtime configuration updates.
 *
 * @example
 * ```typescript
 * const configManager = AgentConfigManager.getInstance();
 * configManager.updateConfig({
 *   auth: { enabled: true, sessionTtlMinutes: 60 }
 * });
 * ```
 */
export declare class AgentConfigManager {
    private static instance;
    private config;
    /**
     * Private constructor to enforce singleton pattern.
     *
     * Initializes the configuration with default values from constants.
     * Should not be called directly - use getInstance() instead.
     */
    private constructor();
    /**
     * Gets the singleton instance of AgentConfigManager.
     *
     * Creates a new instance if one doesn't exist, otherwise returns
     * the existing instance to ensure configuration consistency.
     *
     * @returns The singleton AgentConfigManager instance
     */
    static getInstance(): AgentConfigManager;
    /**
     * Updates the agent configuration with new values.
     *
     * Merges the provided updates with existing configuration, allowing
     * partial updates while preserving other settings.
     *
     * @param updates - Partial configuration object with new values
     */
    updateConfig(updates: Partial<AgentConfig>): void;
    /**
     * Gets a copy of the current agent configuration.
     *
     * Returns a deep copy to prevent external modification of the
     * internal configuration state.
     *
     * @returns Current agent configuration
     */
    getConfig(): AgentConfig;
    /**
     * Checks if authentication is currently enabled.
     *
     * @returns True if OAuth 2.1 authentication is enabled, false otherwise
     */
    isAuthEnabled(): boolean;
    /**
     * Gets the session time-to-live in minutes.
     *
     * @returns Session TTL in minutes
     */
    getSessionTtlMinutes(): number;
    /**
     * Gets the custom session storage path if configured.
     *
     * @returns Custom session storage path or undefined if using default
     */
    getSessionStoragePath(): string | undefined;
    /**
     * Gets the OAuth authorization code time-to-live in milliseconds.
     *
     * @returns OAuth code TTL in milliseconds
     */
    getOAuthCodeTtlMs(): number;
    /**
     * Gets the OAuth access token time-to-live in milliseconds.
     *
     * @returns OAuth token TTL in milliseconds
     */
    getOAuthTokenTtlMs(): number;
    /**
     * Gets the rate limit window in milliseconds.
     *
     * @returns Rate limit window in milliseconds
     */
    getRateLimitWindowMs(): number;
    /**
     * Gets the maximum number of requests per rate limit window.
     *
     * @returns Maximum requests per window
     */
    getRateLimitMax(): number;
    /**
     * Checks if scope validation is enabled.
     *
     * @returns True if tag-based scope validation is enabled, false otherwise
     */
    isScopeValidationEnabled(): boolean;
    /**
     * Checks if enhanced security middleware is enabled.
     *
     * @returns True if enhanced security middleware is enabled, false otherwise
     */
    isEnhancedSecurityEnabled(): boolean;
    /**
     * Gets the external URL if configured.
     *
     * @returns The external URL or undefined if not set
     */
    getExternalUrl(): string | undefined;
    /**
     * Gets the trust proxy configuration for Express.js.
     *
     * @returns Trust proxy setting (boolean, string preset, IP address, or CIDR range)
     */
    getTrustProxy(): string | boolean;
    /**
     * Gets the server URL, preferring external URL if set, otherwise falling back to http://host:port.
     *
     * @returns The server URL to use for OAuth callbacks and public URLs
     */
    getUrl(): string;
    /**
     * Gets the health endpoint detail level configuration.
     *
     * @returns Health detail level ('full' | 'basic' | 'minimal')
     */
    getHealthDetailLevel(): 'full' | 'basic' | 'minimal';
}
//# sourceMappingURL=agentConfig.d.ts.map