import { AUTH_CONFIG, HOST, PORT, RATE_LIMIT_CONFIG } from '../../constants.js';
/**
 * AgentConfigManager manages agent-specific configuration settings.
 *
 * This singleton class handles authentication and session configuration
 * that differs from the main MCP server configuration. It provides
 * centralized access to agent settings with default values and
 * runtime configuration updates.
 *
 * @example
 * ```typescript
 * const configManager = AgentConfigManager.getInstance();
 * configManager.updateConfig({
 *   auth: { enabled: true, sessionTtlMinutes: 60 }
 * });
 * ```
 */
export class AgentConfigManager {
    static instance;
    config;
    /**
     * Private constructor to enforce singleton pattern.
     *
     * Initializes the configuration with default values from constants.
     * Should not be called directly - use getInstance() instead.
     */
    constructor() {
        this.config = {
            host: HOST,
            port: PORT,
            trustProxy: 'loopback',
            auth: {
                enabled: AUTH_CONFIG.SERVER.DEFAULT_ENABLED,
                sessionTtlMinutes: AUTH_CONFIG.SERVER.SESSION.TTL_MINUTES,
                oauthCodeTtlMs: AUTH_CONFIG.SERVER.AUTH_CODE.TTL_MS,
                oauthTokenTtlMs: AUTH_CONFIG.SERVER.TOKEN.TTL_MS,
            },
            rateLimit: {
                windowMs: RATE_LIMIT_CONFIG.OAUTH.WINDOW_MS,
                max: RATE_LIMIT_CONFIG.OAUTH.MAX,
            },
            features: {
                auth: AUTH_CONFIG.SERVER.DEFAULT_ENABLED,
                scopeValidation: AUTH_CONFIG.SERVER.DEFAULT_ENABLED,
                enhancedSecurity: false,
            },
            health: {
                detailLevel: 'minimal',
            },
        };
    }
    /**
     * Gets the singleton instance of AgentConfigManager.
     *
     * Creates a new instance if one doesn't exist, otherwise returns
     * the existing instance to ensure configuration consistency.
     *
     * @returns The singleton AgentConfigManager instance
     */
    static getInstance() {
        if (!AgentConfigManager.instance) {
            AgentConfigManager.instance = new AgentConfigManager();
        }
        return AgentConfigManager.instance;
    }
    /**
     * Updates the agent configuration with new values.
     *
     * Merges the provided updates with existing configuration, allowing
     * partial updates while preserving other settings.
     *
     * @param updates - Partial configuration object with new values
     */
    updateConfig(updates) {
        // Handle nested object merging properly
        const { auth, rateLimit, features, health, ...otherUpdates } = updates;
        this.config = { ...this.config, ...otherUpdates };
        if (auth) {
            this.config.auth = { ...this.config.auth, ...auth };
        }
        if (rateLimit) {
            this.config.rateLimit = { ...this.config.rateLimit, ...rateLimit };
        }
        if (features) {
            this.config.features = { ...this.config.features, ...features };
        }
        if (health) {
            this.config.health = { ...this.config.health, ...health };
        }
    }
    /**
     * Gets a copy of the current agent configuration.
     *
     * Returns a deep copy to prevent external modification of the
     * internal configuration state.
     *
     * @returns Current agent configuration
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * Checks if authentication is currently enabled.
     *
     * @returns True if OAuth 2.1 authentication is enabled, false otherwise
     */
    isAuthEnabled() {
        return this.config.features.auth;
    }
    /**
     * Gets the session time-to-live in minutes.
     *
     * @returns Session TTL in minutes
     */
    getSessionTtlMinutes() {
        return this.config.auth.sessionTtlMinutes;
    }
    /**
     * Gets the custom session storage path if configured.
     *
     * @returns Custom session storage path or undefined if using default
     */
    getSessionStoragePath() {
        return this.config.auth.sessionStoragePath;
    }
    /**
     * Gets the OAuth authorization code time-to-live in milliseconds.
     *
     * @returns OAuth code TTL in milliseconds
     */
    getOAuthCodeTtlMs() {
        return this.config.auth.oauthCodeTtlMs;
    }
    /**
     * Gets the OAuth access token time-to-live in milliseconds.
     *
     * @returns OAuth token TTL in milliseconds
     */
    getOAuthTokenTtlMs() {
        return this.config.auth.oauthTokenTtlMs;
    }
    /**
     * Gets the rate limit window in milliseconds.
     *
     * @returns Rate limit window in milliseconds
     */
    getRateLimitWindowMs() {
        return this.config.rateLimit.windowMs;
    }
    /**
     * Gets the maximum number of requests per rate limit window.
     *
     * @returns Maximum requests per window
     */
    getRateLimitMax() {
        return this.config.rateLimit.max;
    }
    /**
     * Checks if scope validation is enabled.
     *
     * @returns True if tag-based scope validation is enabled, false otherwise
     */
    isScopeValidationEnabled() {
        return this.config.features.scopeValidation;
    }
    /**
     * Checks if enhanced security middleware is enabled.
     *
     * @returns True if enhanced security middleware is enabled, false otherwise
     */
    isEnhancedSecurityEnabled() {
        return this.config.features.enhancedSecurity;
    }
    /**
     * Gets the external URL if configured.
     *
     * @returns The external URL or undefined if not set
     */
    getExternalUrl() {
        return this.config.externalUrl;
    }
    /**
     * Gets the trust proxy configuration for Express.js.
     *
     * @returns Trust proxy setting (boolean, string preset, IP address, or CIDR range)
     */
    getTrustProxy() {
        return this.config.trustProxy;
    }
    /**
     * Gets the server URL, preferring external URL if set, otherwise falling back to http://host:port.
     *
     * @returns The server URL to use for OAuth callbacks and public URLs
     */
    getUrl() {
        return this.config.externalUrl || `http://${this.config.host}:${this.config.port}`;
    }
    /**
     * Gets the health endpoint detail level configuration.
     *
     * @returns Health detail level ('full' | 'basic' | 'minimal')
     */
    getHealthDetailLevel() {
        return this.config.health.detailLevel;
    }
}
//# sourceMappingURL=agentConfig.js.map