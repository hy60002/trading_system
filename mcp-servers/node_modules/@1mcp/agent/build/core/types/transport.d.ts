import { z } from 'zod';
import { Transport } from '@modelcontextprotocol/sdk/shared/transport.js';
/**
 * Enhanced transport interface that includes MCP-specific properties
 */
export interface EnhancedTransport extends Transport {
    timeout?: number;
    tags?: string[];
}
/**
 * OAuth client configuration for connecting to downstream MCP servers
 */
export interface OAuthConfig {
    readonly clientId?: string;
    readonly clientSecret?: string;
    readonly scopes?: string[];
    readonly autoRegister?: boolean;
    readonly redirectUrl?: string;
}
/**
 * Base interface for common transport properties
 */
export interface BaseTransportConfig {
    readonly timeout?: number;
    readonly disabled?: boolean;
    readonly tags?: string[];
    readonly oauth?: OAuthConfig;
}
/**
 * Common configuration for HTTP-based transports (HTTP and SSE)
 */
export interface HTTPBasedTransportConfig extends BaseTransportConfig {
    readonly type: 'http' | 'sse';
    readonly url: string;
    readonly headers?: Record<string, string>;
}
/**
 * Stdio transport specific configuration
 */
export interface StdioTransportConfig extends BaseTransportConfig {
    readonly type: 'stdio';
    readonly command: string;
    readonly args?: string[];
    readonly stderr?: string | number;
    readonly cwd?: string;
    readonly env?: Record<string, string>;
}
/**
 * Zod schema for OAuth configuration
 */
export declare const oAuthConfigSchema: z.ZodObject<{
    clientId: z.ZodOptional<z.ZodString>;
    clientSecret: z.ZodOptional<z.ZodString>;
    scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    autoRegister: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    scopes?: string[] | undefined;
    autoRegister?: boolean | undefined;
}, {
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    scopes?: string[] | undefined;
    autoRegister?: boolean | undefined;
}>;
/**
 * Zod schema for transport configuration
 */
export declare const transportConfigSchema: z.ZodObject<{
    type: z.ZodOptional<z.ZodEnum<["stdio", "sse", "http", "streamableHttp"]>>;
    disabled: z.ZodOptional<z.ZodBoolean>;
    timeout: z.ZodOptional<z.ZodNumber>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    oauth: z.ZodOptional<z.ZodObject<{
        clientId: z.ZodOptional<z.ZodString>;
        clientSecret: z.ZodOptional<z.ZodString>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        autoRegister: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        clientId?: string | undefined;
        clientSecret?: string | undefined;
        scopes?: string[] | undefined;
        autoRegister?: boolean | undefined;
    }, {
        clientId?: string | undefined;
        clientSecret?: string | undefined;
        scopes?: string[] | undefined;
        autoRegister?: boolean | undefined;
    }>>;
    url: z.ZodOptional<z.ZodString>;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    command: z.ZodOptional<z.ZodString>;
    args: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    stderr: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    cwd: z.ZodOptional<z.ZodString>;
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    type?: "http" | "sse" | "stdio" | "streamableHttp" | undefined;
    url?: string | undefined;
    headers?: Record<string, string> | undefined;
    command?: string | undefined;
    args?: string[] | undefined;
    stderr?: string | number | undefined;
    cwd?: string | undefined;
    env?: Record<string, string> | undefined;
    disabled?: boolean | undefined;
    timeout?: number | undefined;
    tags?: string[] | undefined;
    oauth?: {
        clientId?: string | undefined;
        clientSecret?: string | undefined;
        scopes?: string[] | undefined;
        autoRegister?: boolean | undefined;
    } | undefined;
}, {
    type?: "http" | "sse" | "stdio" | "streamableHttp" | undefined;
    url?: string | undefined;
    headers?: Record<string, string> | undefined;
    command?: string | undefined;
    args?: string[] | undefined;
    stderr?: string | number | undefined;
    cwd?: string | undefined;
    env?: Record<string, string> | undefined;
    disabled?: boolean | undefined;
    timeout?: number | undefined;
    tags?: string[] | undefined;
    oauth?: {
        clientId?: string | undefined;
        clientSecret?: string | undefined;
        scopes?: string[] | undefined;
        autoRegister?: boolean | undefined;
    } | undefined;
}>;
/**
 * Union type for all transport configurations
 */
export type TransportConfig = HTTPBasedTransportConfig | StdioTransportConfig;
/**
 * Type for MCP server parameters derived from transport config schema
 */
export type MCPServerParams = z.infer<typeof transportConfigSchema>;
//# sourceMappingURL=transport.d.ts.map