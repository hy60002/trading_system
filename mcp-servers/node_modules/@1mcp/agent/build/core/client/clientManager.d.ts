import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { OutboundConnection, OutboundConnections, OperationOptions, ServerCapability, AuthProviderTransport } from '../types/index.js';
export declare class ClientManager {
    private static instance;
    private outboundConns;
    private transports;
    private connectionSemaphore;
    private constructor();
    static getOrCreateInstance(): ClientManager;
    static get current(): ClientManager;
    static resetInstance(): void;
    /**
     * Creates a new MCP client instance
     * @returns A new Client instance
     */
    private createClient;
    /**
     * Creates a new MCP client instance for external use (e.g., OAuth testing)
     * @returns A new Client instance
     */
    createClientInstance(): Client;
    /**
     * Creates client instances for all transports with retry logic
     * @param transports Record of transport instances
     * @returns Record of client instances
     */
    createClients(transports: Record<string, AuthProviderTransport>): Promise<OutboundConnections>;
    /**
     * Connects a client to its transport with retry logic and OAuth support
     * @param client The client to connect
     * @param transport The transport to connect to
     * @param name The name of the client for logging
     * @returns The connected client (may be a new instance after retries)
     */
    private connectWithRetry;
    /**
     * Gets a client by name with error handling
     * @param clientName The name of the client to get
     * @returns The client instance
     * @throws ClientNotFoundError if the client is not found
     */
    getClient(clientName: string): OutboundConnection;
    /**
     * Gets all outbound connections
     * @returns Map of all outbound connections
     */
    getClients(): OutboundConnections;
    /**
     * Executes a client operation with error handling and retry logic
     * @param clientName The name of the client to use
     * @param operation The operation to execute
     * @param options Operation options including timeout and retry settings
     * @param requiredCapability The capability required for this operation
     */
    executeClientOperation<T>(clientName: string, operation: (clientInfo: OutboundConnection) => Promise<T>, options?: OperationOptions, requiredCapability?: ServerCapability): Promise<T>;
}
/**
 * Custom error class for OAuth authorization required
 */
export declare class OAuthRequiredError extends Error {
    serverName: string;
    client: Client;
    constructor(serverName: string, client: Client);
}
//# sourceMappingURL=clientManager.d.ts.map