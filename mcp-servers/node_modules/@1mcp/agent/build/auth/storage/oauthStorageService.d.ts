import { SessionRepository } from './sessionRepository.js';
import { AuthCodeRepository } from './authCodeRepository.js';
import { AuthRequestRepository } from './authRequestRepository.js';
import { ClientDataRepository } from './clientDataRepository.js';
/**
 * High-level OAuth storage service providing business operations
 *
 * This service orchestrates the lower-level repositories to provide
 * high-level business operations for OAuth flows. It encapsulates
 * the complexity of coordinating multiple data types and provides
 * clean APIs for route handlers.
 */
export declare class OAuthStorageService {
    private storage;
    private sessions;
    private authCodes;
    private authRequests;
    private clientData;
    constructor(storageDir?: string);
    /**
     * Processes user consent approval
     *
     * Creates an authorization code with the selected scopes and builds
     * the redirect URL for the client. Cleans up the temporary auth request.
     */
    processConsentApproval(authRequestId: string, selectedScopes: string[]): Promise<{
        authCode: string;
        redirectUrl: URL;
    }>;
    /**
     * Processes user consent denial
     *
     * Builds an error redirect URL and cleans up the temporary auth request.
     */
    processConsentDenial(authRequestId: string): Promise<URL>;
    /**
     * Creates a temporary authorization request for the consent flow
     */
    createAuthorizationRequest(clientId: string, redirectUri: string, codeChallenge?: string, state?: string, resource?: string, scopes?: string[]): string;
    /**
     * Retrieves an authorization request
     */
    getAuthorizationRequest(authRequestId: string): import("../sessionTypes.js").AuthRequestData | null;
    get sessionRepository(): SessionRepository;
    get authCodeRepository(): AuthCodeRepository;
    get authRequestRepository(): AuthRequestRepository;
    get clientDataRepository(): ClientDataRepository;
    /**
     * Gets the storage directory path
     */
    getStorageDir(): string;
    /**
     * Graceful shutdown
     */
    shutdown(): void;
}
//# sourceMappingURL=oauthStorageService.d.ts.map