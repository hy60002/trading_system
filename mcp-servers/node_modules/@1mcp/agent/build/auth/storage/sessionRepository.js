import { randomUUID } from 'node:crypto';
import logger from '../../logger/logger.js';
import { AUTH_CONFIG } from '../../constants.js';
/**
 * Repository for session operations
 *
 * Manages OAuth 2.1 sessions with automatic expiration and cleanup.
 * Sessions store user authorization state and granted scopes.
 */
export class SessionRepository {
    storage;
    constructor(storage) {
        this.storage = storage;
    }
    /**
     * Creates a new session
     */
    create(clientId, resource, scopes, ttlMs) {
        const sessionId = AUTH_CONFIG.SERVER.SESSION.ID_PREFIX + randomUUID();
        const sessionData = {
            clientId,
            resource,
            scopes,
            expires: Date.now() + ttlMs,
            createdAt: Date.now(),
        };
        this.storage.writeData(AUTH_CONFIG.SERVER.SESSION.FILE_PREFIX, sessionId, sessionData);
        logger.info(`Created session: ${sessionId} for client: ${clientId}`);
        return sessionId;
    }
    /**
     * Creates a session with a specific token ID (for access tokens)
     */
    createWithId(tokenId, clientId, resource, scopes, ttlMs) {
        const sessionId = AUTH_CONFIG.SERVER.SESSION.ID_PREFIX + tokenId;
        const sessionData = {
            clientId,
            resource,
            scopes,
            expires: Date.now() + ttlMs,
            createdAt: Date.now(),
        };
        this.storage.writeData(AUTH_CONFIG.SERVER.SESSION.FILE_PREFIX, sessionId, sessionData);
        logger.info(`Created session with ID: ${sessionId} for client: ${clientId}`);
        return sessionId;
    }
    /**
     * Retrieves a session by ID
     */
    get(sessionId) {
        return this.storage.readData(AUTH_CONFIG.SERVER.SESSION.FILE_PREFIX, sessionId);
    }
    /**
     * Deletes a session by ID
     */
    delete(sessionId) {
        const result = this.storage.deleteData(AUTH_CONFIG.SERVER.SESSION.FILE_PREFIX, sessionId);
        if (result) {
            logger.info(`Deleted session: ${sessionId}`);
        }
        return result;
    }
}
//# sourceMappingURL=sessionRepository.js.map