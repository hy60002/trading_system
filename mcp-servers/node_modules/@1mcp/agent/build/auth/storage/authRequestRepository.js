import { randomUUID } from 'node:crypto';
import logger from '../../logger/logger.js';
import { AUTH_CONFIG } from '../../constants.js';
/**
 * Repository for authorization request operations
 *
 * Manages temporary authorization requests used in the consent flow.
 * These store OAuth parameters securely server-side while user reviews consent.
 */
export class AuthRequestRepository {
    storage;
    constructor(storage) {
        this.storage = storage;
    }
    /**
     * Creates a new authorization request
     */
    create(clientId, redirectUri, codeChallenge, state, resource, scopes) {
        const authRequestId = AUTH_CONFIG.SERVER.AUTH_REQUEST.ID_PREFIX + randomUUID();
        const authRequestData = {
            clientId,
            redirectUri,
            codeChallenge,
            state,
            resource,
            scopes,
            expires: Date.now() + AUTH_CONFIG.SERVER.AUTH_REQUEST.TTL_MS,
            createdAt: Date.now(),
        };
        this.storage.writeData(AUTH_CONFIG.SERVER.AUTH_REQUEST.FILE_PREFIX, authRequestId, authRequestData);
        logger.info(`Created auth request: ${authRequestId} for client: ${clientId}`);
        return authRequestId;
    }
    /**
     * Retrieves authorization request data by ID
     */
    get(authRequestId) {
        return this.storage.readData(AUTH_CONFIG.SERVER.AUTH_REQUEST.FILE_PREFIX, authRequestId);
    }
    /**
     * Deletes an authorization request by ID
     */
    delete(authRequestId) {
        const result = this.storage.deleteData(AUTH_CONFIG.SERVER.AUTH_REQUEST.FILE_PREFIX, authRequestId);
        if (result) {
            logger.info(`Deleted auth request: ${authRequestId}`);
        }
        return result;
    }
}
//# sourceMappingURL=authRequestRepository.js.map