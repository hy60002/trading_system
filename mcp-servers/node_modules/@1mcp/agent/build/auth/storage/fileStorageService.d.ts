import { ExpirableData } from '../sessionTypes.js';
/**
 * Generic file storage service with unified cleanup for all expirable data types.
 *
 * This service provides a common foundation for storing sessions, auth codes,
 * auth requests, and client data with automatic cleanup of expired items.
 *
 * Features:
 * - Generic CRUD operations for any expirable data type
 * - Unified periodic cleanup every 5 minutes
 * - Path traversal protection
 * - Automatic directory creation
 * - Corruption handling (removes corrupted files)
 */
export declare class FileStorageService {
    private storageDir;
    private cleanupInterval;
    constructor(storageDir?: string);
    /**
     * Ensures the storage directory exists
     */
    private ensureDirectory;
    /**
     * Gets the file path for a given prefix and ID
     */
    getFilePath(filePrefix: string, id: string): string;
    /**
     * Validates ID format for security
     */
    private isValidId;
    /**
     * Writes data to a file with the specified prefix and ID
     */
    writeData<T extends ExpirableData>(filePrefix: string, id: string, data: T): void;
    /**
     * Reads data from a file with the specified prefix and ID
     * Returns null if file doesn't exist or data is expired
     */
    readData<T extends ExpirableData>(filePrefix: string, id: string): T | null;
    /**
     * Deletes data file with the specified prefix and ID
     */
    deleteData(filePrefix: string, id: string): boolean;
    /**
     * Starts periodic cleanup of expired data files
     */
    private startPeriodicCleanup;
    /**
     * Unified cleanup for all expired data types
     */
    cleanupExpiredData(): number;
    /**
     * Lists all files in the storage directory that match a given prefix.
     *
     * @param filePrefix - The file prefix to filter by (optional)
     * @returns Array of file names (without directory path)
     */
    listFiles(filePrefix?: string): string[];
    /**
     * Gets the storage directory path
     */
    getStorageDir(): string;
    /**
     * Graceful shutdown - stops cleanup interval
     */
    shutdown(): void;
}
//# sourceMappingURL=fileStorageService.d.ts.map