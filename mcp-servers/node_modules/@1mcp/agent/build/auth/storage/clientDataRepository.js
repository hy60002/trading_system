import logger from '../../logger/logger.js';
import { AUTH_CONFIG } from '../../constants.js';
/**
 * Repository for OAuth client data operations
 *
 * Manages registered OAuth client information with automatic expiration.
 * Client data is stored for a configurable period (default 30 days).
 */
export class ClientDataRepository {
    storage;
    constructor(storage) {
        this.storage = storage;
    }
    /**
     * Saves OAuth client data
     */
    save(clientId, data, ttlMs) {
        const clientData = {
            ...data,
            expires: data.client_secret_expires_at ? data.client_secret_expires_at * 1000 : Date.now() + ttlMs,
            createdAt: data.client_id_issued_at ? data.client_id_issued_at * 1000 : Date.now(),
        };
        this.storage.writeData(AUTH_CONFIG.SERVER.SESSION.FILE_PREFIX, clientId, clientData);
        logger.info(`Saved client data: ${clientId}`);
        return clientId;
    }
    /**
     * Retrieves OAuth client data by client ID
     */
    get(clientId) {
        const clientData = this.storage.readData(AUTH_CONFIG.SERVER.SESSION.FILE_PREFIX, clientId);
        return clientData;
    }
    /**
     * Deletes OAuth client data by client ID
     */
    delete(clientId) {
        const result = this.storage.deleteData(AUTH_CONFIG.SERVER.SESSION.FILE_PREFIX, clientId);
        if (result) {
            logger.info(`Deleted client data: ${clientId}`);
        }
        return result;
    }
}
//# sourceMappingURL=clientDataRepository.js.map