import { FileStorageService } from './fileStorageService.js';
import { ClientSessionData } from '../sessionTypes.js';
/**
 * ClientSessionRepository handles OAuth 2.1 client session storage using the layered storage architecture.
 *
 * This repository manages client sessions for OAuth connections to downstream MCP servers.
 * It follows the same patterns as other repositories (SessionRepository, AuthCodeRepository, etc.)
 * and uses the FileStorageService for consistent data management.
 *
 * Features:
 * - Repository pattern with FileStorageService backend
 * - Server name sanitization for security
 * - Automatic expiration handling
 * - Consistent with other storage repositories
 * - Type-safe client session data management
 *
 * @example
 * ```typescript
 * const storage = new FileStorageService('/path/to/sessions');
 * const repository = new ClientSessionRepository(storage);
 *
 * const sessionData = {
 *   serverName: 'test-server',
 *   clientInfo: JSON.stringify(clientInfo),
 *   tokens: JSON.stringify(tokens),
 *   expires: Date.now() + 3600000,
 *   createdAt: Date.now()
 * };
 *
 * repository.save('test-server', sessionData, 3600000);
 * const session = repository.get('test-server');
 * ```
 */
export declare class ClientSessionRepository {
    private storage;
    constructor(storage: FileStorageService);
    /**
     * Saves or updates a client session.
     *
     * @param serverName - The server name for the client session
     * @param clientSessionData - The client session data to store
     * @param ttlMs - Time to live in milliseconds
     * @returns The sanitized server name used as key
     */
    save(serverName: string, clientSessionData: ClientSessionData, ttlMs: number): string;
    /**
     * Retrieves client session data by server name.
     *
     * @param serverName - The server name to retrieve client session for
     * @returns Client session data if exists and not expired, null otherwise
     */
    get(serverName: string): ClientSessionData | null;
    /**
     * Deletes a client session by server name.
     *
     * @param serverName - The server name to delete client session for
     * @returns True if client session was deleted, false if it didn't exist
     */
    delete(serverName: string): boolean;
    /**
     * Lists all client session server names.
     *
     * This method scans the storage for client session files and extracts
     * the server names from the file names.
     *
     * @returns Array of server names that have client sessions
     */
    list(): string[];
    /**
     * Creates a standardized session ID for the server name.
     *
     * @param sanitizedServerName - The sanitized server name
     * @returns The session ID for storage
     */
    private getSessionId;
}
//# sourceMappingURL=clientSessionRepository.d.ts.map