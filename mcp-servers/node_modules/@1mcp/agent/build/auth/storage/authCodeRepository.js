import { randomUUID } from 'node:crypto';
import logger from '../../logger/logger.js';
import { AUTH_CONFIG } from '../../constants.js';
/**
 * Repository for authorization code operations
 *
 * Manages OAuth 2.1 authorization codes for token exchange.
 * Authorization codes are short-lived (1 minute) and single-use.
 */
export class AuthCodeRepository {
    storage;
    constructor(storage) {
        this.storage = storage;
    }
    /**
     * Creates a new authorization code
     */
    create(clientId, redirectUri, resource, scopes, ttlMs, codeChallenge) {
        const code = AUTH_CONFIG.SERVER.AUTH_CODE.ID_PREFIX + randomUUID();
        const authCodeData = {
            clientId,
            redirectUri,
            resource,
            scopes,
            codeChallenge,
            expires: Date.now() + ttlMs,
            createdAt: Date.now(),
        };
        this.storage.writeData(AUTH_CONFIG.SERVER.AUTH_CODE.FILE_PREFIX, code, authCodeData);
        logger.info(`Created auth code: ${code} for client: ${clientId}`);
        return code;
    }
    /**
     * Retrieves authorization code data by code
     */
    get(code) {
        return this.storage.readData(AUTH_CONFIG.SERVER.AUTH_CODE.FILE_PREFIX, code);
    }
    /**
     * Deletes an authorization code by code
     */
    delete(code) {
        const result = this.storage.deleteData(AUTH_CONFIG.SERVER.AUTH_CODE.FILE_PREFIX, code);
        if (result) {
            logger.info(`Deleted auth code: ${code}`);
        }
        return result;
    }
}
//# sourceMappingURL=authCodeRepository.js.map