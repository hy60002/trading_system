import logger from '../../logger/logger.js';
import { AUTH_CONFIG } from '../../constants.js';
import { FileStorageService } from './fileStorageService.js';
import { SessionRepository } from './sessionRepository.js';
import { AuthCodeRepository } from './authCodeRepository.js';
import { AuthRequestRepository } from './authRequestRepository.js';
import { ClientDataRepository } from './clientDataRepository.js';
import { auditScopeOperation } from '../../utils/scopeValidation.js';
/**
 * High-level OAuth storage service providing business operations
 *
 * This service orchestrates the lower-level repositories to provide
 * high-level business operations for OAuth flows. It encapsulates
 * the complexity of coordinating multiple data types and provides
 * clean APIs for route handlers.
 */
export class OAuthStorageService {
    storage;
    sessions;
    authCodes;
    authRequests;
    clientData;
    constructor(storageDir) {
        this.storage = new FileStorageService(storageDir);
        this.sessions = new SessionRepository(this.storage);
        this.authCodes = new AuthCodeRepository(this.storage);
        this.authRequests = new AuthRequestRepository(this.storage);
        this.clientData = new ClientDataRepository(this.storage);
    }
    /**
     * Processes user consent approval
     *
     * Creates an authorization code with the selected scopes and builds
     * the redirect URL for the client. Cleans up the temporary auth request.
     */
    async processConsentApproval(authRequestId, selectedScopes) {
        const authRequest = this.authRequests.get(authRequestId);
        if (!authRequest) {
            throw new Error('Invalid or expired authorization request');
        }
        // Create authorization code with selected scopes
        const authCode = this.authCodes.create(authRequest.clientId, authRequest.redirectUri, authRequest.resource || '', selectedScopes, AUTH_CONFIG.SERVER.AUTH_CODE.TTL_MS, authRequest.codeChallenge);
        // Clean up the temporary auth request
        this.authRequests.delete(authRequestId);
        // Build redirect URL
        const redirectUrl = new URL(authRequest.redirectUri);
        redirectUrl.searchParams.set('code', authCode);
        if (authRequest.state) {
            redirectUrl.searchParams.set('state', authRequest.state);
        }
        // Audit the operation
        auditScopeOperation('authorization_granted', {
            clientId: authRequest.clientId,
            requestedScopes: authRequest.scopes || [],
            grantedScopes: selectedScopes,
            success: true,
        });
        logger.info(`OAuth authorization granted for client ${authRequest.clientId}`, {
            clientId: authRequest.clientId,
            redirectUri: authRequest.redirectUri,
            grantedScopes: selectedScopes,
        });
        return { authCode, redirectUrl };
    }
    /**
     * Processes user consent denial
     *
     * Builds an error redirect URL and cleans up the temporary auth request.
     */
    async processConsentDenial(authRequestId) {
        const authRequest = this.authRequests.get(authRequestId);
        if (!authRequest) {
            throw new Error('Invalid or expired authorization request');
        }
        // Clean up the auth request
        this.authRequests.delete(authRequestId);
        // Build error redirect URL
        const redirectUrl = new URL(authRequest.redirectUri);
        redirectUrl.searchParams.set('error', 'access_denied');
        redirectUrl.searchParams.set('error_description', 'User denied the request');
        if (authRequest.state) {
            redirectUrl.searchParams.set('state', authRequest.state);
        }
        // Audit the operation
        auditScopeOperation('authorization_denied', {
            clientId: authRequest.clientId,
            success: false,
            error: 'User denied authorization',
        });
        logger.info(`OAuth authorization denied by user for client ${authRequest.clientId}`);
        return redirectUrl;
    }
    /**
     * Creates a temporary authorization request for the consent flow
     */
    createAuthorizationRequest(clientId, redirectUri, codeChallenge, state, resource, scopes) {
        return this.authRequests.create(clientId, redirectUri, codeChallenge, state, resource, scopes);
    }
    /**
     * Retrieves an authorization request
     */
    getAuthorizationRequest(authRequestId) {
        return this.authRequests.get(authRequestId);
    }
    // Expose repositories for direct access when needed (with getters for encapsulation)
    get sessionRepository() {
        return this.sessions;
    }
    get authCodeRepository() {
        return this.authCodes;
    }
    get authRequestRepository() {
        return this.authRequests;
    }
    get clientDataRepository() {
        return this.clientData;
    }
    /**
     * Gets the storage directory path
     */
    getStorageDir() {
        return this.storage.getStorageDir();
    }
    /**
     * Graceful shutdown
     */
    shutdown() {
        this.storage.shutdown();
    }
}
//# sourceMappingURL=oauthStorageService.js.map