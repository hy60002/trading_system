import type { Response } from 'express';
import type { OAuthServerProvider, AuthorizationParams } from '@modelcontextprotocol/sdk/server/auth/provider.js';
import type { OAuthRegisteredClientsStore } from '@modelcontextprotocol/sdk/server/auth/clients.js';
import type { AuthInfo } from '@modelcontextprotocol/sdk/server/auth/types.js';
import type { OAuthClientInformationFull, OAuthTokens, OAuthTokenRevocationRequest } from '@modelcontextprotocol/sdk/shared/auth.js';
import { OAuthStorageService } from './storage/oauthStorageService.js';
/**
 * Implementation of SDK's OAuthServerProvider interface using the new repository architecture.
 *
 * This provider implements OAuth 2.1 server functionality using the MCP SDK's interfaces
 * with the new layered storage architecture for better separation of concerns.
 */
export declare class SDKOAuthServerProvider implements OAuthServerProvider {
    oauthStorage: OAuthStorageService;
    private configManager;
    private _clientsStore;
    constructor(sessionStoragePath?: string);
    get clientsStore(): OAuthRegisteredClientsStore;
    /**
     * Handles the authorization request with scope validation and user consent
     */
    authorize(client: OAuthClientInformationFull, params: AuthorizationParams, res: Response): Promise<void>;
    /**
     * Determines if user consent is required for the authorization
     */
    private requiresUserConsent;
    /**
     * Renders the consent page for scope selection
     */
    private renderConsentPage;
    /**
     * Approves the authorization and redirects back to client
     */
    approveAuthorization(client: OAuthClientInformationFull, params: AuthorizationParams, grantedScopes: string[], res: Response): Promise<void>;
    /**
     * Generates the HTML for the consent page
     */
    private generateConsentPageHtml;
    /**
     * Retrieves the PKCE challenge for an authorization code
     */
    challengeForAuthorizationCode(client: OAuthClientInformationFull, authorizationCode: string): Promise<string>;
    /**
     * Exchanges authorization code for access token
     */
    exchangeAuthorizationCode(client: OAuthClientInformationFull, authorizationCode: string, _codeVerifier?: string, redirectUri?: string, resource?: URL): Promise<OAuthTokens>;
    /**
     * Exchanges refresh token for new access token (not implemented)
     */
    exchangeRefreshToken(_client: OAuthClientInformationFull, _refreshToken: string, _scopes?: string[], _resource?: URL): Promise<OAuthTokens>;
    /**
     * Verifies access token and returns auth info with granted scopes
     */
    verifyAccessToken(token: string): Promise<AuthInfo>;
    /**
     * Revokes a token
     */
    revokeToken(client: OAuthClientInformationFull, request: OAuthTokenRevocationRequest): Promise<void>;
    /**
     * Graceful shutdown
     */
    shutdown(): void;
}
//# sourceMappingURL=sdkOAuthServerProvider.d.ts.map