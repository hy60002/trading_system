import { OAuthClientProvider } from '@modelcontextprotocol/sdk/client/auth.js';
import type { OAuthClientMetadata, OAuthClientInformationFull, OAuthTokens } from '@modelcontextprotocol/sdk/shared/auth.js';
/**
 * OAuth client configuration for connecting to downstream MCP servers
 */
export interface OAuthClientConfig {
    clientId?: string;
    clientSecret?: string;
    scopes?: string[];
    redirectUrl: string;
}
/**
 * SDK-compatible OAuth client provider that replaces the custom implementation.
 *
 * This provider implements the OAuth 2.1 Authorization Code Grant flow using
 * the SDK's OAuthClientProvider interface while maintaining compatibility with
 * the existing session storage system.
 */
export declare class SDKOAuthClientProvider implements OAuthClientProvider {
    private _clientMetadata;
    private _clientInfo?;
    private _tokens?;
    private _codeVerifier?;
    private _state?;
    private sessionRepository;
    private serverName;
    private config;
    private _authorizationUrl?;
    constructor(serverName: string, config: OAuthClientConfig, sessionStoragePath?: string);
    get redirectUrl(): string;
    get clientMetadata(): OAuthClientMetadata;
    /**
     * Returns current client registration information
     */
    clientInformation(): OAuthClientInformationFull | undefined;
    /**
     * Saves client registration information from dynamic registration
     */
    saveClientInformation(clientInfo: OAuthClientInformationFull): void;
    /**
     * Returns current OAuth tokens
     */
    tokens(): OAuthTokens | undefined;
    /**
     * Saves OAuth tokens after successful authorization
     */
    saveTokens(tokens: OAuthTokens): void;
    /**
     * Stores authorization URL instead of prompting user in console
     */
    redirectToAuthorization(authorizationUrl: URL): void;
    /**
     * Gets the current authorization URL
     */
    getAuthorizationUrl(): string | undefined;
    /**
     * Clears the stored authorization URL
     */
    clearAuthorizationUrl(): void;
    /**
     * Saves PKCE code verifier for the authorization session
     */
    saveCodeVerifier(codeVerifier: string): void;
    /**
     * Returns the PKCE code verifier for token exchange
     */
    codeVerifier(): string | Promise<string>;
    /**
     * Returns the OAuth state parameter for CSRF protection
     */
    state(): string | Promise<string>;
    /**
     * Custom resource validation (optional)
     */
    validateResourceURL(serverUrl: string | URL, resource?: string): Promise<URL | undefined>;
    /**
     * Load persisted OAuth data from unified client session storage
     */
    private loadPersistedData;
    /**
     * Persist all OAuth data to unified client session storage
     */
    private persistAllData;
    /**
     * Check if OAuth tokens are expired
     */
    private isTokenExpired;
    /**
     * Clean up resources
     */
    shutdown(): void;
}
//# sourceMappingURL=sdkOAuthClientProvider.d.ts.map