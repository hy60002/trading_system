import { z } from "zod";
export declare const getQuoteSchema: z.ZodObject<{
    symbol: z.ZodString;
}, "strip", z.ZodTypeAny, {
    symbol: string;
}, {
    symbol: string;
}>;
export declare const getHistoricalDataSchema: z.ZodObject<{
    symbol: z.ZodString;
    period1: z.ZodDefault<z.ZodString>;
    period2: z.ZodDefault<z.ZodString>;
    interval: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    period1: string;
    period2: string;
    interval: string;
}, {
    symbol: string;
    period1?: string | undefined;
    period2?: string | undefined;
    interval?: string | undefined;
}>;
export declare const searchSymbolsSchema: z.ZodObject<{
    query: z.ZodString;
}, "strip", z.ZodTypeAny, {
    query: string;
}, {
    query: string;
}>;
export declare const getCompanyInfoSchema: z.ZodObject<{
    symbol: z.ZodString;
}, "strip", z.ZodTypeAny, {
    symbol: string;
}, {
    symbol: string;
}>;
export declare const getRecommendationsSchema: z.ZodObject<{
    symbol: z.ZodString;
}, "strip", z.ZodTypeAny, {
    symbol: string;
}, {
    symbol: string;
}>;
export declare const getTrendingSymbolsSchema: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export declare const getMarketSummarySchema: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export declare const getNewsSchema: z.ZodObject<{
    query: z.ZodString;
    newsCount: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    query: string;
    newsCount: number;
}, {
    query: string;
    newsCount?: number | undefined;
}>;
export declare const getOptionsSchema: z.ZodObject<{
    symbol: z.ZodString;
    date: z.ZodOptional<z.ZodString>;
    formatted: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    formatted: boolean;
    date?: string | undefined;
}, {
    symbol: string;
    date?: string | undefined;
    formatted?: boolean | undefined;
}>;
export declare const getInsightsSchema: z.ZodObject<{
    symbol: z.ZodString;
    reportsCount: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    reportsCount: number;
}, {
    symbol: string;
    reportsCount?: number | undefined;
}>;
export declare const getDailyGainersSchema: z.ZodObject<{
    count: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    count: number;
}, {
    count?: number | undefined;
}>;
export declare const getDailyLosersSchema: z.ZodObject<{
    count: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    count: number;
}, {
    count?: number | undefined;
}>;
export declare const getChartSchema: z.ZodObject<{
    symbol: z.ZodString;
    period1: z.ZodDefault<z.ZodString>;
    period2: z.ZodDefault<z.ZodString>;
    interval: z.ZodDefault<z.ZodString>;
    events: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    period1: string;
    period2: string;
    interval: string;
    events: string;
}, {
    symbol: string;
    period1?: string | undefined;
    period2?: string | undefined;
    interval?: string | undefined;
    events?: string | undefined;
}>;
export declare const getQuoteSummarySchema: z.ZodObject<{
    symbol: z.ZodString;
    modules: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    modules: string[];
}, {
    symbol: string;
    modules?: string[] | undefined;
}>;
export declare function getQuote(params: z.infer<typeof getQuoteSchema>): Promise<any>;
export declare function getHistoricalData(params: z.infer<typeof getHistoricalDataSchema>): Promise<any>;
export declare function searchSymbols(params: z.infer<typeof searchSymbolsSchema>): Promise<any>;
export declare function getCompanyInfo(params: z.infer<typeof getCompanyInfoSchema>): Promise<any>;
export declare function getRecommendations(params: z.infer<typeof getRecommendationsSchema>): Promise<any>;
export declare function getTrendingSymbols(params: z.infer<typeof getTrendingSymbolsSchema>): Promise<any>;
export declare function getMarketSummary(params: z.infer<typeof getMarketSummarySchema>): Promise<any>;
export declare function getNews(params: z.infer<typeof getNewsSchema>): Promise<any>;
export declare function getOptions(params: z.infer<typeof getOptionsSchema>): Promise<any>;
export declare function getInsights(params: z.infer<typeof getInsightsSchema>): Promise<any>;
export declare function getDailyGainers(params: z.infer<typeof getDailyGainersSchema>): Promise<any>;
export declare function getDailyLosers(params: z.infer<typeof getDailyLosersSchema>): Promise<any>;
export declare function getChart(params: z.infer<typeof getChartSchema>): Promise<any>;
export declare function getQuoteSummary(params: z.infer<typeof getQuoteSummarySchema>): Promise<any>;
//# sourceMappingURL=tools.d.ts.map